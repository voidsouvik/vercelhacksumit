{"version":3,"sources":["webpack://EthereumProvider/webpack/bootstrap","webpack://EthereumProvider/external \"eth-rpc-errors\"","webpack://EthereumProvider/external \"@toruslabs/openlogin-jrpc\"","webpack://EthereumProvider/external \"@web3auth/base\"","webpack://EthereumProvider/external \"bignumber.js\"","webpack://EthereumProvider/external \"ethereumjs-util\"","webpack://EthereumProvider/external \"@babel/runtime/helpers/defineProperty\"","webpack://EthereumProvider/external \"@metamask/eth-sig-util\"","webpack://EthereumProvider/external \"@toruslabs/base-controllers\"","webpack://EthereumProvider/external \"@web3auth/base-provider\"","webpack://EthereumProvider/external \"@ethereumjs/common\"","webpack://EthereumProvider/external \"@toruslabs/http-helpers\"","webpack://EthereumProvider/external \"@ethereumjs/tx\"","webpack://EthereumProvider/./src/rpc/walletMidddleware.ts","webpack://EthereumProvider/./src/rpc/ethRpcMiddlewares.ts","webpack://EthereumProvider/./src/rpc/jrpcClient.ts","webpack://EthereumProvider/./src/providers/injectedProviders/walletConnectUtils.ts","webpack://EthereumProvider/./src/providers/injectedProviders/WalletConnectProvider.ts","webpack://EthereumProvider/./src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","webpack://EthereumProvider/./src/providers/converter.ts","webpack://EthereumProvider/./src/providers/utils.ts","webpack://EthereumProvider/./src/providers/privateKeyProviders/TransactionFormatter/constants.ts","webpack://EthereumProvider/./src/providers/privateKeyProviders/TransactionFormatter/utils.ts","webpack://EthereumProvider/./src/providers/privateKeyProviders/TransactionFormatter/index.ts","webpack://EthereumProvider/./src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts","webpack://EthereumProvider/./src/providers/index.ts"],"names":["resemblesAddress","str","length","createWalletMiddleware","getAccounts","getPrivateKey","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","Error","validateAndNormalizeKeyholder","address","req","accounts","normalizedAccounts","map","_address","toLowerCase","normalizedAddress","includes","ethErrors","rpc","invalidParams","message","lookupAccounts","res","result","lookupDefaultAccount","sendTransaction","methodNotSupported","txParams","params","from","signTransaction","ethSign","extraParams","msgParams","data","signTypedData","version","signTypedDataV3","signTypedDataV4","personalSign","firstParam","secondParam","warning","encryptionPublicKey","decryptMessage","ciphertext","fetchPrivateKey","createScaffoldMiddleware","eth_accounts","createAsyncMiddleware","eth_private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","createEthMiddleware","providerHandlers","ethMiddleware","mergeMiddleware","eth_syncing","createChainSwitchMiddleware","addChain","switchChain","addNewChain","chainParams","undefined","chainId","rpcUrls","nativeCurrency","updateChain","wallet_addEthereumChain","wallet_switchEthereumChain","createAccountMiddleware","updatePrivatekey","updateAccount","accountParams","privateKey","wallet_updateAccount","createChainIdMiddleware","next","end","method","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","getProviderHandlers","connector","_","signMessage","signPersonalMessage","WalletConnectProvider","BaseProvider","constructor","config","state","chainConfig","chainNamespace","CHAIN_NAMESPACES","EIP155","enable","provider","custom","code","setupProvider","_providerEngineProxy","request","onConnectorStateUpdate","setupEngine","currentChainConfig","getChainConfig","ticker","tickerName","update","Number","parseInt","name","symbol","networkId","rpcUrl","configure","lookupNetwork","connected","WalletLoginError","notConnectedError","connectedHexChainId","isHexStrict","toString","WalletInitializationError","rpcConnectionError","emit","engine","JRPCEngine","push","providerFromEngine","updateProviderEngineProxy","on","error","payload","connectedChainId","providerFactory","signTx","privKey","txFormatter","finalTxParams","formatTransaction","common","getCommonConfiguration","unsignedEthTx","TransactionFactory","fromTxData","signedTx","sign","Buffer","serialize","getProviderEngineProxy","privateToAddress","providerEngineProxy","txHash","concat","rawMessageSig","privKeyBuffer","sig","log","debug","SignTypedDataVersion","V1","V3","V4","info","getEncryptionPublicKey","stripped","stripHexPrefix","buff","decrypted","decrypt","encryptedData","JSON","parse","BIG_NUMBER_WEI_MULTIPLIER","BigNumber","BIG_NUMBER_GWEI_MULTIPLIER","BIG_NUMBER_ETH_MULTIPLIER","toBigNumber","hex","n","dec","toNormalizedDenomination","WEI","bigNumber","div","GWEI","ETH","toSpecifiedDenomination","times","dp","ROUND_HALF_UP","baseChange","converter","value","fromNumericBase","fromDenomination","toNumericBase","toDenomination","numberOfDecimals","convertedValue","ROUND_HALF_DOWN","conversionUtil","decGWEIToHexWEI","decGWEI","hexWEIToDecGWEI","bnLessThan","a","b","lt","bnToHex","inputBn","addHexPrefix","hexToBn","inputHex","isBigNumber","BnMultiplyByFraction","targetBN","numerator","denominator","numberBN","denomBN","multipliedBy","dividedBy","LegacyGasAPIEndpoint","EIP1559APIEndpoint","TRANSACTION_ENVELOPE_TYPES","LEGACY","ACCESS_LIST","FEE_MARKET","TRANSACTION_TYPES","SENT_ETHER","CONTRACT_INTERACTION","DEPLOY_CONTRACT","STANDARD_TRANSACTION","GAS_ESTIMATE_TYPES","ETH_GASPRICE","NONE","normalizeGWEIDecimalNumbers","numberAsWEIHex","numberAsGWEI","fetchEip1159GasEstimates","url","estimates","get","normalizedEstimates","estimatedBaseFee","low","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","medium","high","fetchLegacyGasPriceEstimates","referrer","referrerPolicy","mode","SafeGasPrice","ProposeGasPrice","FastGasPrice","TransactionFormatter","providerProxy","init","isEIP1559Compatible","getEIP1559Compatibility","displayName","hardfork","Hardfork","London","Berlin","customChainParams","defaultHardfork","Common","clonedTxParams","nonce","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gas","defaultGasLimit","getDefaultGasLimit","gasLimit","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","getDefaultGasFees","type","fetchEthGasPriceEstimate","latestBlock","supportsEIP1559","baseFeePerGas","fetchGasFeeEstimateData","isLegacyGasAPICompatible","gasData","replace","gasFeeEstimates","gasEstimateType","e","estimateTxGas","txMeta","analyzeGasUsage","block","blockGasLimitBN","saferGasLimitBN","estimatedGasHex","warn","blockGasLimit","addGasBuffer","initialGasLimitHex","blockGasLimitHex","multiplier","initialGasLimitBn","blockGasLimitBn","upperGasLimitBn","bufferedGasLimitBn","gt","determineTransactionCategory","txParameters","to","txCategory","codeIsEmpty","transactionCategory","TWENTY_ONE_THOUSAND","EthereumPrivateKeyProvider","bind","chainSwitchMiddleware","getChainSwitchMiddleware","getAccountMiddleware","existingKey","network","chainDisconnected","chainSwitchHandlers","chainName","blockExplorerUrls","blockExplorer","accountHandlers"],"mappings":"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","file":"ethereumProvider.cjs.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","module.exports = require(\"eth-rpc-errors\");","module.exports = require(\"@toruslabs/openlogin-jrpc\");","module.exports = require(\"@web3auth/base\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"ethereumjs-util\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@metamask/eth-sig-util\");","module.exports = require(\"@toruslabs/base-controllers\");","module.exports = require(\"@web3auth/base-provider\");","module.exports = require(\"@ethereumjs/common\");","module.exports = require(\"@toruslabs/http-helpers\");","module.exports = require(\"@ethereumjs/tx\");","import type { AccessListEIP2930TxData, FeeMarketEIP1559TxData, TxData } from \"@ethereumjs/tx\";\nimport { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { createAsyncMiddleware, createScaffoldMiddleware, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nexport interface ExtendedAccessListEIP2930TxData extends AccessListEIP2930TxData {\n  from: string;\n}\n\nexport interface ExtendedFeeMarketEIP1559Transaction extends FeeMarketEIP1559TxData {\n  from: string;\n}\n\nexport interface ExtendedTxData extends TxData {\n  from: string;\n}\n\nexport type TransactionParams = ExtendedFeeMarketEIP1559Transaction & ExtendedAccessListEIP2930TxData & ExtendedTxData;\n\nexport interface MessageParams<T> {\n  from: string;\n  data: T;\n}\n\nexport interface TypedMessageParams<T> {\n  from: string;\n  version: string;\n  data: T;\n}\n\nfunction resemblesAddress(str: string): boolean {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nexport interface WalletMiddlewareOptions {\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  processDecryptMessage?: (msgParams: MessageParams<string>, req: JRPCRequest<unknown>) => string;\n  processEncryptionPublicKey?: (address: string, req: JRPCRequest<unknown>) => Promise<string>;\n  processEthSignMessage?: (msgParams: MessageParams<string>, req: JRPCRequest<unknown>) => Promise<string>;\n  processPersonalMessage?: (msgParams: MessageParams<string>, req: JRPCRequest<unknown>) => Promise<string>;\n  processTransaction?: (txParams: TransactionParams, req: JRPCRequest<unknown>) => Promise<string>;\n  processSignTransaction?: (txParams: TransactionParams, req: JRPCRequest<unknown>) => Promise<string>;\n  processTypedMessage?: (msgParams: MessageParams<TypedDataV1>, req: JRPCRequest<unknown>, version: string) => Promise<string>;\n  processTypedMessageV3?: (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, req: JRPCRequest<unknown>, version: string) => Promise<string>;\n  processTypedMessageV4?: (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, req: JRPCRequest<unknown>, version: string) => Promise<string>;\n}\n\nexport function createWalletMiddleware({\n  getAccounts,\n  getPrivateKey,\n  processDecryptMessage,\n  processEncryptionPublicKey,\n  processEthSignMessage,\n  processPersonalMessage,\n  processTransaction,\n  processSignTransaction,\n  processTypedMessage,\n  processTypedMessageV3,\n  processTypedMessageV4,\n}: WalletMiddlewareOptions): JRPCMiddleware<string, unknown> {\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  }\n\n  //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n  async function validateAndNormalizeKeyholder(address: string, req: JRPCRequest<unknown>): Promise<string> {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts: string[] = await getAccounts(req);\n      const normalizedAccounts: string[] = accounts.map((_address) => _address.toLowerCase());\n      const normalizedAddress: string = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n    throw ethErrors.rpc.invalidParams({\n      message: `Invalid parameters: must provide an Ethereum address.`,\n    });\n  }\n\n  //\n  // account lookups\n  //\n\n  async function lookupAccounts(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  }\n\n  //\n  // transaction signatures\n  //\n\n  async function sendTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processSignTransaction(txParams, req);\n  }\n\n  //\n  // message signatures\n  //\n\n  async function ethSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: string = (req.params as string[])[1];\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const message: TypedDataV1 = (req.params as TypedDataV1[])[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[1], req);\n    const version = \"V1\";\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<TypedDataV1> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V3\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V4\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    // process normally\n    const firstParam: string = (req.params as string[])[0];\n    const secondParam: string = (req.params as string[])[1];\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n\n    // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n    let address: string, message: string;\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      (res as any).warning = warning;\n\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    // eslint-disable-next-line require-atomic-updates\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[0], req);\n\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const ciphertext: string = (req.params as string)[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[1], req);\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: ciphertext,\n    };\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage),\n  });\n}\n","import {\n  createAsyncMiddleware,\n  createScaffoldMiddleware,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createWalletMiddleware, WalletMiddlewareOptions } from \"./walletMidddleware\";\n\nexport type IProviderHandlers = WalletMiddlewareOptions;\nexport function createEthMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage,\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([\n    createScaffoldMiddleware({\n      eth_syncing: false,\n    }),\n    createWalletMiddleware({\n      getAccounts,\n      getPrivateKey,\n      processTransaction,\n      processEthSignMessage,\n      processSignTransaction,\n      processTypedMessage,\n      processTypedMessageV3,\n      processTypedMessageV4,\n      processPersonalMessage,\n      processEncryptionPublicKey,\n      processDecryptMessage,\n    }),\n  ]);\n  return ethMiddleware;\n}\n\nexport interface AddEthereumChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addChain: (params: AddEthereumChainParameter) => Promise<void>;\n  switchChain: (params: { chainId: string }) => Promise<void>;\n}\n\nexport function createChainSwitchMiddleware({ addChain, switchChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  async function addNewChain(req: JRPCRequest<AddEthereumChainParameter[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n\n    res.result = await addChain(chainParams);\n  }\n  async function updateChain(req: JRPCRequest<{ chainId: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain),\n  });\n}\n\n// #region account middlewares\nexport interface IAccountHandlers {\n  updatePrivatekey: (params: { privateKey: string }) => Promise<void>;\n}\n\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  async function updateAccount(req: JRPCRequest<{ privateKey: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const accountParams = req.params?.length ? req.params[0] : undefined;\n    if (!accountParams?.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount),\n  });\n}\n\n// #endregion account middlewares\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport type { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: CustomChainConfig): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<CustomChainConfig>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createJsonRpcClient(providerConfig: CustomChainConfig): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { chainId, rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector, ITxData } from \"@walletconnect/types\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers } from \"../../rpc/ethRpcMiddlewares\";\nimport { MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/walletMidddleware\";\n\nexport function getProviderHandlers({ connector }: { connector: IConnector }): IProviderHandlers {\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async (_: JRPCRequest<unknown>) => {\n      const { accounts } = connector;\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.sendTransaction(txParams as ITxData);\n      return result;\n    },\n    processSignTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTransaction(txParams as ITxData);\n      return result;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async (_: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processTypedMessageV4: async (_: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processEncryptionPublicKey: async (_: string): Promise<string> => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: (_: MessageParams<string>): string => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n  };\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector } from \"@walletconnect/types\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, isHexStrict, WalletInitializationError, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./walletConnectUtils\";\n\nexport interface WalletConnectProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface WalletConnectProviderState extends BaseProviderState {\n  accounts: string[];\n}\n\nexport class WalletConnectProvider extends BaseProvider<BaseProviderConfig, WalletConnectProviderState, IConnector> {\n  private connector: IConnector | null = null;\n\n  constructor({ config, state, connector }: { config: WalletConnectProviderConfig; state?: BaseProviderState; connector?: IConnector }) {\n    super({\n      config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 } },\n      state: { ...(state || {}), chainId: \"loading\", accounts: [] },\n    });\n    this.connector = connector || null;\n  }\n\n  public static getProviderInstance = async (params: {\n    connector: IConnector;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<WalletConnectProvider> => {\n    const providerFactory = new WalletConnectProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.connector);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(connector: IConnector): Promise<void> {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  public async switchChain({ chainId }: { chainId: string }): Promise<void> {\n    const currentChainConfig = this.getChainConfig(chainId);\n    const { ticker, tickerName, rpcTarget } = currentChainConfig;\n    this.update({\n      chainId: \"loading\",\n    });\n    await this.connector.updateChain({\n      chainId: Number.parseInt(chainId, 16),\n      nativeCurrency: {\n        name: tickerName,\n        symbol: ticker,\n      },\n      networkId: Number.parseInt(chainId, 10),\n      rpcUrl: rpcTarget,\n    });\n    this.configure({ chainConfig: currentChainConfig });\n    await this.lookupNetwork(this.connector);\n  }\n\n  protected async lookupNetwork(connector: IConnector): Promise<string> {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : `0x${connector.chainId.toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n\n  private async setupEngine(connector: IConnector): Promise<void> {\n    const providerHandlers = getProviderHandlers({ connector });\n    this.update({\n      accounts: connector.accounts || [],\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork(connector);\n  }\n\n  private async onConnectorStateUpdate(connector: IConnector) {\n    connector.on(\"session_update\", async (error: Error | null, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n      const { accounts, chainId: connectedChainId, rpcUrl } = payload;\n      // Check if accounts changed and trigger event\n      if (accounts?.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts,\n        });\n        // await this.setupEngine(connector);\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n      const connectedHexChainId = isHexStrict(connectedChainId) ? connectedChainId : `0x${connectedChainId.toString(16)}`;\n      // Check if chainId changed and trigger event\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        // Handle rpcUrl update\n        this.configure({\n          chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId, rpcTarget: rpcUrl },\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n}\n","import { TransactionFactory } from \"@ethereumjs/tx\";\nimport {\n  decrypt,\n  EthEncryptedData,\n  getEncryptionPublicKey,\n  MessageTypes,\n  personalSign,\n  signTypedData,\n  SignTypedDataVersion,\n  TypedDataV1,\n  TypedMessage,\n} from \"@metamask/eth-sig-util\";\nimport { SafeEventEmitterProvider, signMessage } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { log } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { privateToAddress, stripHexPrefix } from \"ethereumjs-util\";\n\nimport { IProviderHandlers } from \"../../rpc/ethRpcMiddlewares\";\nimport { MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/walletMidddleware\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\n\nasync function signTx(txParams: TransactionParams & { gas?: string }, privKey: string, txFormatter: TransactionFormatter): Promise<Buffer> {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n    common,\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return signedTx;\n}\n\nexport function getProviderHandlers({\n  txFormatter,\n  privKey,\n  getProviderEngineProxy,\n}: {\n  txFormatter: TransactionFormatter;\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): IProviderHandlers {\n  return {\n    getAccounts: async (_: JRPCRequest<unknown>) => [`0x${privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\")}`],\n    getPrivateKey: async (_: JRPCRequest<unknown>) => privKey,\n    processTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request<string[], string>({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))],\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return `0x${signedTx.toString(\"hex\")}`;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({ privateKey: privKeyBuffer, data: msgParams.data });\n      return sig;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({ privateKey: privKeyBuffer, data: msgParams.data, version: SignTypedDataVersion.V1 });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({ privateKey: privKeyBuffer, data: msgParams.data, version: SignTypedDataVersion.V3 });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({ privateKey: privKeyBuffer, data: msgParams.data, version: SignTypedDataVersion.V4 });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address: string, _: JRPCRequest<unknown>): Promise<string> => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): string => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({ encryptedData: JSON.parse(buff.toString(\"utf8\")) as EthEncryptedData, privateKey: privKey });\n      return decrypted;\n    },\n  };\n}\n","import BigNumber from \"bignumber.js\";\nimport { stripHexPrefix } from \"ethereumjs-util\";\n\ntype DenominationType = \"WEI\" | \"GWEI\" | \"ETH\";\ntype NumericBaseType = \"hex\" | \"dec\";\n\ntype ConverterInput = {\n  value: string | BigNumber;\n  fromNumericBase: NumericBaseType;\n  fromDenomination?: DenominationType;\n  toNumericBase?: NumericBaseType;\n  toDenomination?: DenominationType;\n  numberOfDecimals?: number;\n};\n// Big Number Constants\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\");\n\n// Setter Maps\nconst toBigNumber: Record<NumericBaseType, (n: string | BigNumber) => BigNumber> = {\n  hex: (n: string | BigNumber) => (typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16)),\n  dec: (n: string | BigNumber) => new BigNumber(n, 10),\n};\nconst toNormalizedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: (bigNumber) => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: (bigNumber) => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER),\n};\nconst toSpecifiedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: (bigNumber) => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: (bigNumber) => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n};\nconst baseChange: Record<string, (n: BigNumber) => string> = {\n  hex: (n) => n.toString(16),\n  dec: (n) => new BigNumber(n).toString(10),\n};\n\nconst converter = (params: ConverterInput): string | BigNumber => {\n  const { value, fromNumericBase, fromDenomination, toNumericBase, toDenomination, numberOfDecimals } = params;\n  let convertedValue: string | BigNumber = toBigNumber[fromNumericBase](value);\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue as BigNumber);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue as BigNumber);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = (convertedValue as BigNumber).dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n  return convertedValue;\n};\n\nconst conversionUtil = (\n  value: string | BigNumber,\n  { fromNumericBase = \"hex\", toNumericBase, fromDenomination, toDenomination, numberOfDecimals }: Partial<ConverterInput>\n): BigNumber | string => {\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\",\n  });\n};\n\nfunction decGWEIToHexWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\",\n  }) as string;\n}\n\nfunction hexWEIToDecGWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\",\n  }) as string;\n}\n\nexport { conversionUtil, decGWEIToHexWEI, hexWEIToDecGWEI };\n","import { BigNumber } from \"bignumber.js\";\nimport { addHexPrefix, stripHexPrefix } from \"ethereumjs-util\";\n\nexport function bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n  return new BigNumber(a, 10).lt(b, 10);\n}\n\nexport function bnToHex(inputBn: BigNumber) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\nexport function hexToBn(inputHex: string): BigNumber {\n  if (BigNumber.isBigNumber(inputHex)) return inputHex;\n  return new BigNumber(stripHexPrefix(inputHex), 16);\n}\n\nexport function BnMultiplyByFraction(targetBN: BigNumber, numerator: number | BigNumber, denominator: number | BigNumber): BigNumber {\n  const numberBN = new BigNumber(numerator);\n  const denomBN = new BigNumber(denominator);\n  return targetBN.multipliedBy(numberBN).dividedBy(denomBN);\n}\n","export const LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nexport const EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nexport const TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\",\n};\n\nexport const TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\",\n};\n\nexport const GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\",\n};\n","import { get } from \"@toruslabs/http-helpers\";\nimport { BigNumber } from \"bignumber.js\";\n\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { EIP1159GasData, LegacyGasData } from \"./interfaces\";\n\nexport function normalizeGWEIDecimalNumbers(n: string | BigNumber): string {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\nexport async function fetchEip1159GasEstimates(url: string): Promise<EIP1159GasData> {\n  const estimates = await get<EIP1159GasData>(url);\n  const normalizedEstimates = {\n    ...estimates,\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: {\n      ...estimates.low,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas),\n    },\n    medium: {\n      ...estimates.medium,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas),\n    },\n    high: {\n      ...estimates.high,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas),\n    },\n  };\n  return normalizedEstimates;\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\nexport async function fetchLegacyGasPriceEstimates(url: string): Promise<LegacyGasData> {\n  const result = await get<{\n    SafeGasPrice: string;\n    ProposeGasPrice: string;\n    FastGasPrice: string;\n  }>(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\",\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice,\n  };\n}\n","import Common, { Hardfork } from \"@ethereumjs/common\";\nimport { Block } from \"@toruslabs/base-controllers\";\nimport { CustomChainConfig, log, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { addHexPrefix, stripHexPrefix } from \"ethereumjs-util\";\n\nimport { TransactionParams } from \"../../../rpc/walletMidddleware\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { bnLessThan, BnMultiplyByFraction, bnToHex, hexToBn } from \"../../utils\";\nimport { EIP1559APIEndpoint, GAS_ESTIMATE_TYPES, LegacyGasAPIEndpoint, TRANSACTION_ENVELOPE_TYPES, TRANSACTION_TYPES } from \"./constants\";\nimport { EIP1159GasData, FallbackGasData, GasData, LegacyGasData, TxType } from \"./interfaces\";\nimport { fetchEip1159GasEstimates, fetchLegacyGasPriceEstimates } from \"./utils\";\n\nexport class TransactionFormatter {\n  private chainConfig: CustomChainConfig | null = null;\n\n  private getProviderEngineProxy: () => SafeEventEmitterProvider;\n\n  private isEIP1559Compatible = false;\n\n  constructor({ getProviderEngineProxy }: { getProviderEngineProxy: () => SafeEventEmitterProvider }) {\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n\n  async init(): Promise<void> {\n    this.chainConfig = (await this.providerProxy.request<CustomChainConfig>({ method: \"eth_provider_config\", params: [] })) as CustomChainConfig;\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n\n  async getCommonConfiguration(): Promise<Common> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const { displayName: name, chainId } = this.chainConfig;\n    const hardfork = this.isEIP1559Compatible ? Hardfork.London : Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork,\n    };\n    return Common.custom(customChainParams);\n  }\n\n  async formatTransaction(txParams: TransactionParams & { gas?: string }): Promise<TransactionParams & { gas?: string }> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n\n    const clonedTxParams = {\n      ...txParams,\n    };\n\n    if (clonedTxParams.nonce === undefined)\n      clonedTxParams.nonce = (await this.providerProxy.request<number>({\n        method: \"eth_getTransactionCount\",\n        params: [txParams.from, \"latest\"],\n      })) as number;\n\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas;\n      return clonedTxParams;\n    }\n\n    if (!clonedTxParams.gas) {\n      const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n      if (defaultGasLimit) {\n        clonedTxParams.gasLimit = defaultGasLimit;\n      }\n    } else {\n      clonedTxParams.gasLimit = clonedTxParams.gas;\n    }\n\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas,\n    } = await this.getDefaultGasFees(clonedTxParams);\n\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(\n          typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas,\n          typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice\n        )\n          ? defaultMaxPriorityFeePerGas\n          : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      }\n\n      // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    }\n\n    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice as never;\n    }\n\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n\n  private async fetchEthGasPriceEstimate(): Promise<{ gasPrice: string }> {\n    const gasPrice = (await this.providerProxy.request<string>({ method: \"eth_gasPrice\", params: [] })) as string;\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString(),\n    };\n  }\n\n  private async getEIP1559Compatibility(): Promise<boolean> {\n    const latestBlock = await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n\n    return !!supportsEIP1559;\n  }\n\n  private async fetchGasFeeEstimateData(): Promise<GasData> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n\n    let gasData: GasData;\n\n    try {\n      if (this.isEIP1559Compatible) {\n        // TODO: kovan is not working due to a bug in metamask api\n        const estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e: unknown) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n        };\n      } catch (error: unknown) {\n        throw new Error(`Gas fee/price estimation failed. Message: ${(error as Error).message}`);\n      }\n    }\n    return gasData;\n  }\n\n  private async getDefaultGasFees(\n    txParams: TransactionParams & { gas?: string }\n  ): Promise<{ gasPrice?: string; maxFeePerGas?: string; maxPriorityFeePerGas?: string }> {\n    if ((!this.isEIP1559Compatible && txParams.gasPrice) || (this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas)) {\n      return {};\n    }\n\n    try {\n      const { gasFeeEstimates, gasEstimateType } = await this.fetchGasFeeEstimateData();\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const { medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {} } = gasFeeEstimates as EIP1159GasData;\n\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas)),\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: decGWEIToHexWEI((gasFeeEstimates as LegacyGasData).medium),\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as FallbackGasData).gasPrice)),\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n\n    const { gasPrice } = await this.fetchEthGasPriceEstimate();\n\n    return { gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice)) };\n  }\n\n  private async estimateTxGas(txMeta: TransactionParams): Promise<string> {\n    const txParams = { ...txMeta };\n\n    // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = (await this.providerProxy.request<string>({ method: \"eth_estimateGas\", params: [txParams] })) as string;\n    return gas;\n  }\n\n  private async analyzeGasUsage(txMeta: TransactionParams): Promise<{\n    blockGasLimit: string;\n    estimatedGasHex: string;\n  }> {\n    const block = (await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] })) as Block;\n    // fallback to block gasLimit\n    const blockGasLimitBN = hexToBn(block.gasLimit as string);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error: unknown) {\n      log.warn(error);\n    }\n    return { blockGasLimit: block.gasLimit as string, estimatedGasHex };\n  }\n\n  private addGasBuffer(initialGasLimitHex: string, blockGasLimitHex: string, multiplier = 1.5): string {\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.multipliedBy(0.9).dp(0, 1);\n    const bufferedGasLimitBn = initialGasLimitBn.multipliedBy(multiplier).dp(0, 1);\n\n    // if initialGasLimit is above blockGasLimit, dont modify it\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn);\n    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn);\n    // otherwise use blockGasLimit\n    return bnToHex(upperGasLimitBn);\n  }\n\n  private async determineTransactionCategory(txParameters: TransactionParams & { gas?: string }): Promise<{\n    transactionCategory: TxType | null;\n    code?: string;\n  }> {\n    const { data, to } = txParameters;\n    let code = \"\";\n\n    let txCategory: TxType | null;\n\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = (await this.providerProxy.request<string>({ method: \"eth_getCode\", params: [to, \"latest\"] })) as string;\n      } catch (error) {\n        log.warn(error);\n      }\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n\n    return { transactionCategory: txCategory, code };\n  }\n\n  private async getDefaultGasLimit(txParams: TransactionParams & { gas?: string }): Promise<string> {\n    const { transactionCategory } = await this.determineTransactionCategory({ ...txParams });\n\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n\n      const TWENTY_ONE_THOUSAND = 21_000;\n\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return addHexPrefix(TWENTY_ONE_THOUSAND.toString(16));\n    }\n\n    const { blockGasLimit, estimatedGasHex } = await this.analyzeGasUsage(txParams);\n\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit as string);\n    return gasLimit;\n  }\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport {\n  AddEthereumChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createEthMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/ethRpcMiddlewares\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./ethPrivatekeyUtils\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\n\nexport interface EthereumPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface EthereumPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class EthereumPrivateKeyProvider extends BaseProvider<BaseProviderConfig, EthereumPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: EthereumPrivKeyProviderConfig; state?: EthereumPrivKeyProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<EthereumPrivateKeyProvider> => {\n    const providerFactory = new EthereumPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    // Not a partial anymore because of checks in ctor\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request<string[], string>({\n      method: \"net_version\",\n      params: [],\n    });\n\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(`Invalid network, net_version is: ${network}`);\n    if (this.state.chainId !== chainId) {\n      this._providerEngineProxy.emit(\"chainChanged\", chainId);\n      this._providerEngineProxy.emit(\"connect\", { chainId });\n    }\n    this.update({ chainId });\n    return network;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addChain: async (params: AddEthereumChainParameter): Promise<void> => {\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n        this.addChain({\n          chainNamespace: \"eip155\",\n          chainId,\n          ticker: nativeCurrency?.symbol || \"ETH\",\n          tickerName: nativeCurrency?.name || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchChain: async (params: { chainId: string }): Promise<void> => {\n        const { chainId } = params;\n        await this.switchChain({ chainId });\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (params: { privateKey: string }): Promise<void> => {\n        const { privateKey } = params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","export * from \"./injectedProviders\";\nexport * from \"./privateKeyProviders\";\n"],"sourceRoot":""}